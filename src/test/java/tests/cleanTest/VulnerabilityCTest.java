package tests.cleanTest;

import io.qameta.allure.*;
import io.restassured.response.Response;
import jdk.jfr.Description;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;

import static io.qameta.allure.SeverityLevel.CRITICAL;
import static io.restassured.RestAssured.given;

public class VulnerabilityCTest {
    String host = "http://127.0.0.1:9292";
    Response response;
    String idScan;

    @Test
    @Order(2)
    @DisplayName("Test Vulnerability")
    @Description("This test is for starting a scan with owasp zap")
    @Severity(CRITICAL)
    @Owner("Wilfor")
    @Link(name = "Website", url = "http://todo.ly")
    @Issue("DEFECT-123")
    @TmsLink("TMS-456")
    @Epic("Security")
    @Feature("Vulnerability")
    @Story("Authentication Security")
    public void scannerVulnerabilityTest(){
        startScanner();
        waitScanIsComplete();
    }

    @Step("1) Select HOST and start the scan for vulnerabilities")
    private void startScanner() {
        //START SCAN
        response = given()
                .queryParam("url", "http://todo.ly")
                .log().all()
                .when()
                .get(host + "/JSON/ascan/action/scan/");

        response.then().log().all();
        idScan = response.then().extract().path("scan");
    }

    @Step("2) Verify the scan is completed to 100%")
    private void waitScanIsComplete() {
        //SCAN STATE
        String status = "0";
        do {
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
            response = given()
                    .queryParam("scanId", idScan)
                    .log().all()
                    .when()
                    .get(host + "/JSON/ascan/view/status/");
            response.then().log().all();
            status = response.then().extract().path("status");
        }
        while(!status.equals("100"));
    }

    @AfterEach
    public void generateReports(){
        //GET VULNERABILITIES
        response = given()
                .queryParam("scanId", idScan)
                .log().all()
                .when()
                .get(host + "/JSON/ascan/view/scanProgress/");

        response.then().log().all();
        attachReport("list vulnerability", response.getBody().asString());
        //MAKE REPORT
        response = given()
                .log().all()
                .when()
                .get(host + "/OTHER/core/other/htmlreport/");

        response.then().log().all();
        attachReport("report owasp zap vulnerability alerts", response.getBody().asString());
    }
    @Attachment(value = "{0}", type = "text/html")
    public String attachReport(String name, String content){
        return content;
    }
}
